require('dotenv').config();
const mongoose = require('mongoose');

async function ุงุฎุชุจุงุฑุงุชุตุงูMongoDB() {
  console.log('๐ ุงุฎุชุจุงุฑ ุงุชุตุงู MongoDB...');
  console.log('๐ ุงูุจูุฆุฉ:', process.env.NODE_ENV || 'development');
  
  // ุงูุชุญูู ูู ูุฌูุฏ MONGO_URI
  const MONGO_URI = process.env.MONGO_URI;
  if (!MONGO_URI) {
    console.error('โ ูุชุบูุฑ ุงูุจูุฆุฉ MONGO_URI ุบูุฑ ูุนูู!');
    console.log('๐ก ูุฑุฌู ุชุนููู MONGO_URI ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
    return;
  }
  
  console.log('๐ MONGO_URI:', MONGO_URI ? 'ูุนูู (ูุฎูู ููุฃูุงู)' : 'ุบูุฑ ูุนูู');
  
  try {
    console.log('๐ ูุญุงููุฉ ุงูุงุชุตุงู...');
    
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
      maxPoolSize: 10,
      retryWrites: true,
      w: 'majority'
    });
    
    console.log('โ ุงุชุตุงู MongoDB ูุงุฌุญ!');
    console.log('๐ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', mongoose.connection.name);
    console.log('๐ ุงููุถูู:', mongoose.connection.host);
    console.log('๐ ุงููููุฐ:', mongoose.connection.port);
    console.log('๐ค ุงููุณุชุฎุฏู:', mongoose.connection.user);
    
    // ุงุฎุชุจุงุฑ ุงุณุชุนูุงู ุจุณูุท
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('๐ ุงููุฌููุนุงุช ุงูููุฌูุฏุฉ:', collections.length);
    collections.forEach(col => console.log(`  - ${col.name}`));
    
  } catch (error) {
    console.error('โ ูุดู ุงุชุตุงู MongoDB!');
    console.error('โ ุฑุณุงูุฉ ุงูุฎุทุฃ:', error.message);
    console.error('โ ุฑูุฒ ุงูุฎุทุฃ:', error.code);
    console.error('โ ุงุณู ุงูุฎุทุฃ:', error.name);
    
    // ุชูุฏูู ุฅุฑุดุงุฏุงุช ูุญุฏุฏุฉ ุจูุงุกู ุนูู ููุน ุงูุฎุทุฃ
    if (error.code === 'ENOTFOUND') {
      console.log('\n๐ ุงุณุชูุดุงู ุฃุฎุทุงุก ENOTFOUND:');
      console.log('1. ุชุญูู ูู ุตุญุฉ MongoDB URI');
      console.log('2. ุชุญูู ูู ุงูุงุชุตุงู ุจุงูุดุจูุฉ');
      console.log('3. ุชุฃูุฏ ูู ุฅููุงููุฉ ุงููุตูู ุฅูู ูุฌููุนุฉ MongoDB');
      console.log('4. ุชุญูู ูู ุฃู IP ูุฏุฑุฌ ูู ุงููุงุฆูุฉ ุงูุจูุถุงุก ูู MongoDB Atlas');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('\n๐ ุงุณุชูุดุงู ุฃุฎุทุงุก ECONNREFUSED:');
      console.log('1. ุชุญูู ูู ุชุดุบูู ุฎุฏูุฉ MongoDB');
      console.log('2. ุชุญูู ูู ุฑูู ุงููููุฐ ูู ุณูุณูุฉ ุงูุงุชุตุงู');
      console.log('3. ุชุญูู ูู ุฅุนุฏุงุฏุงุช ุงูุฌุฏุงุฑ ุงููุงุฑู');
    } else if (error.code === 'ETIMEDOUT') {
      console.log('\n๐ ุงุณุชูุดุงู ุฃุฎุทุงุก ETIMEDOUT:');
      console.log('1. ุชุญูู ูู ุงูุงุชุตุงู ุจุงูุดุจูุฉ');
      console.log('2. ุฌุฑุจ ุฒูุงุฏุฉ ูููุฉ ุงูุงุชุตุงู');
      console.log('3. ุชุญูู ูู ูุฌูุฏ ูุดุงูู ูู MongoDB Atlas');
    } else if (error.message.includes('Authentication failed')) {
      console.log('\n๐ ุงุณุชูุดุงู ุฃุฎุทุงุก ุงููุตุงุฏูุฉ:');
      console.log('1. ุชุญูู ูู ุงุณู ุงููุณุชุฎุฏู ููููุฉ ุงููุฑูุฑ');
      console.log('2. ุชุญูู ูู ุจูุงูุงุช ุงุนุชูุงุฏ MongoDB Atlas');
      console.log('3. ุชุฃูุฏ ูู ุฃู ุงููุณุชุฎุฏู ูุฏูู ุตูุงุญูุงุช ููุงุณุจุฉ');
    }
    
    console.log('\n๐ก ุชูุณูู MongoDB URI ุงูุดุงุฆุน:');
    console.log('mongodb+srv://username:password@cluster.abc123.mongodb.net/database?retryWrites=true&w=majority');
  } finally {
    // ุฅุบูุงู ุงูุงุชุตุงู
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู');
    }
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
ุงุฎุชุจุงุฑุงุชุตุงูMongoDB().catch(console.error); 