// ุณูุฑูุจุช ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงููุญุฏุซ ุจุนุฏ ุฅุตูุงุญ ุฎูุงุฑุงุช MongoDB
const mongoose = require('mongoose');

// ุงุณุชุฎุฏุงู ููุณ ุงูุฑุงุจุท ุงููุญุฏุซ
const MONGO_URI = 'mongodb+srv://abubaker:Baker123@cluster0.kamrxrt.mongodb.net/tabibiq?retryWrites=true&w=majority&appName=Cluster0';

async function ุงุฎุชุจุงุฑุงูุงุชุตุงูุงููุญุฏุซ() {
  console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงููุญุฏุซ ุจุนุฏ ุฅุตูุงุญ ุฎูุงุฑุงุช MongoDB...');
  console.log('๐ MONGO_URI:', MONGO_URI.replace(/\/\/.*@/, '//***:***@'));
  
  try {
    console.log('๐ก ูุญุงููุฉ ุงูุงุชุตุงู ุจุฏูู ุงูุฎูุงุฑุงุช ุงูููููุฉ...');
    
    // ุงูุงุชุตุงู ุจุฏูู ุงูุฎูุงุฑุงุช ุงูููููุฉ
    await mongoose.connect(MONGO_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
      maxPoolSize: 10,
      retryWrites: true,
      w: 'majority'
    });
    
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ!');
    console.log('๐ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', mongoose.connection.name);
    console.log('๐ ุงููุถูู:', mongoose.connection.host);
    console.log('๐ ุญุงูุฉ ุงูุงุชุตุงู:', mongoose.connection.readyState === 1 ? 'ูุชุตู' : 'ุบูุฑ ูุชุตู');
    
    // ุงุฎุชุจุงุฑ ุงูุนูููุงุช ุงูุฃุณุงุณูุฉ
    console.log('\n๐งช ุงุฎุชุจุงุฑ ุงูุนูููุงุช ุงูุฃุณุงุณูุฉ...');
    
    // ุฅูุดุงุก ูุฎุทุท ุงุฎุชุจุงุฑ ุจุณูุท
    const testSchema = new mongoose.Schema({
      message: String,
      timestamp: { type: Date, default: Date.now },
      test: { type: Boolean, default: true }
    });
    
    const TestModel = mongoose.model('TestConnection', testSchema);
    
    // ุงุฎุชุจุงุฑ ุงูุฅุฏุฑุงุฌ
    const testDoc = new TestModel({
      message: 'ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงููุญุฏุซ',
      test: true
    });
    
    await testDoc.save();
    console.log('โ ุงุฎุชุจุงุฑ ุงูุฅุฏุฑุงุฌ: ูุฌุญ');
    
    // ุงุฎุชุจุงุฑ ุงููุฑุงุกุฉ
    const readDoc = await TestModel.findOne({ _id: testDoc._id });
    console.log('โ ุงุฎุชุจุงุฑ ุงููุฑุงุกุฉ: ูุฌุญ');
    
    // ุงุฎุชุจุงุฑ ุงูุชุญุฏูุซ
    await TestModel.updateOne(
      { _id: testDoc._id },
      { $set: { updated: true } }
    );
    console.log('โ ุงุฎุชุจุงุฑ ุงูุชุญุฏูุซ: ูุฌุญ');
    
    // ุงุฎุชุจุงุฑ ุงูุญุฐู
    await TestModel.deleteOne({ _id: testDoc._id });
    console.log('โ ุงุฎุชุจุงุฑ ุงูุญุฐู: ูุฌุญ');
    
    // ุงุฎุชุจุงุฑ ุงููุฌููุนุงุช ุงูููุฌูุฏุฉ
    console.log('\n๐ ุงููุฌููุนุงุช ุงูููุฌูุฏุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    const collections = await mongoose.connection.db.listCollections().toArray();
    
    for (const collection of collections) {
      const count = await mongoose.connection.db.collection(collection.name).countDocuments();
      console.log(`   ${collection.name}: ${count} ูุณุชูุฏ`);
    }
    
    console.log('\n๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช! ุงูุงุชุตุงู ูุนูู ุจุดูู ูุซุงูู');
    console.log('โ ูุง ุชูุฌุฏ ุชุญุฐูุฑุงุช ุญูู ุงูุฎูุงุฑุงุช ุงูููููุฉ');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู:', error.message);
    
    if (error.message.includes('ENOTFOUND')) {
      console.log('๐ก ุงูุญู: ุชุฃูุฏ ูู ุตุญุฉ ุฑุงุจุท ุงูุงุชุตุงู ูุงุชุตุงู ุงูุฅูุชุฑูุช');
    } else if (error.message.includes('Authentication failed')) {
      console.log('๐ก ุงูุญู: ุชุฃูุฏ ูู ุตุญุฉ ุงุณู ุงููุณุชุฎุฏู ููููุฉ ุงููุฑูุฑ');
    } else if (error.message.includes('ECONNREFUSED')) {
      console.log('๐ก ุงูุญู: ุชุฃูุฏ ูู ุฃู ุงูุณูุฑูุฑ ูุชุงุญ ูุฃู IP ูุถุงู ูู whitelist');
    }
    
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู');
    }
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
ุงุฎุชุจุงุฑุงูุงุชุตุงูุงููุญุฏุซ(); 